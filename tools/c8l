#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

c8l_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l - [EXPERIMENTAL] Chainloop (c8) Labs CLI\n"
    echo

  else
    printf "c8l - [EXPERIMENTAL] Chainloop (c8) Labs CLI\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  c8l COMMAND\n"
  printf "  c8l [COMMAND] --help | -h\n"
  printf "  c8l --version | -v\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Show help about a command\n" "help   "
  printf "  %s   [i] Inspect.\n" "inspect"
  printf "  %s   Chainloop CLI UX improved\n" "cli    "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

c8l_help_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l help - Show help about a command\n"
    echo

  else
    printf "c8l help - Show help about a command\n"
    echo

  fi

  printf "Alias: h\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l help\n"
  printf "  c8l help --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_inspect_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l inspect - [i] Inspect.\n"
    echo

  else
    printf "c8l inspect - [i] Inspect.\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l inspect\n"
  printf "  c8l inspect --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli - Chainloop CLI UX improved\n"
    echo

  else
    printf "c8l cli - Chainloop CLI UX improved\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli COMMAND\n"
  printf "  c8l cli [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   [it] Install Chainloop CLI and all required tools\n" "install-tools            "
  printf "  %s   [aafy] Add to the current atestation based on the yaml file.\n" "attestation-add-from-yaml"
  printf "  %s   [as] Get the status of the current attestation.\n" "attestation-status       "
  printf "  %s   [ap] Push the current attestation to the Chainloop server.\n" "attestation-push         "
  printf "  %s   [ggs] Generate a summary of the attestation for GitHub Action.\n" "generate-github-summary  "
  printf "  %s   [ga] Get all attestations for artifact\n" "get-attestations         "
  printf "  %s   [g] Get artifact from Chainloop\n" "get                      "
  printf "  %s   [wg] Get workflow from Chainloop.\n" "workflow-get             "
  printf "  %s   [wl] List workflows from Chainloop.\n" "workflow-list            "
  printf "  %s   [wrg] Get workflow run from Chainloop.\n" "workflow-run-get         "
  printf "  %s   [wrl] List workflow runs from Chainloop.\n" "workflow-run-list        "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_install_tools_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli install-tools - [it] Install Chainloop CLI and all required tools\n"
    echo

  else
    printf "c8l cli install-tools - [it] Install Chainloop CLI and all required tools\n"
    echo

  fi

  printf "Alias: it\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli install-tools\n"
  printf "  c8l cli install-tools --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_attestation_add_from_yaml_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli attestation-add-from-yaml - [aafy] Add to the current atestation based on the yaml file.\n"
    echo

  else
    printf "c8l cli attestation-add-from-yaml - [aafy] Add to the current atestation based on the yaml file.\n"
    echo

  fi

  printf "Alias: aafy\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli attestation-add-from-yaml\n"
  printf "  c8l cli attestation-add-from-yaml --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_attestation_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli attestation-status - [as] Get the status of the current attestation.\n"
    echo

  else
    printf "c8l cli attestation-status - [as] Get the status of the current attestation.\n"
    echo

  fi

  printf "Alias: as\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli attestation-status\n"
  printf "  c8l cli attestation-status --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_attestation_push_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli attestation-push - [ap] Push the current attestation to the Chainloop server.\n"
    echo

  else
    printf "c8l cli attestation-push - [ap] Push the current attestation to the Chainloop server.\n"
    echo

  fi

  printf "Alias: ap\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli attestation-push\n"
  printf "  c8l cli attestation-push --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_generate_github_summary_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli generate-github-summary - [ggs] Generate a summary of the attestation for GitHub Action.\n"
    echo

  else
    printf "c8l cli generate-github-summary - [ggs] Generate a summary of the attestation for GitHub Action.\n"
    echo

  fi

  printf "Alias: ggs\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli generate-github-summary\n"
  printf "  c8l cli generate-github-summary --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_get_attestations_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli get-attestations - [ga] Get all attestations for artifact\n"
    echo

  else
    printf "c8l cli get-attestations - [ga] Get all attestations for artifact\n"
    echo

  fi

  printf "Alias: ga\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli get-attestations [SHA]\n"
  printf "  c8l cli get-attestations --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SHA"
    printf "    SHA256 of the artifact.\n"
    echo

  fi
}

c8l_cli_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli get - [g] Get artifact from Chainloop\n"
    echo

  else
    printf "c8l cli get - [g] Get artifact from Chainloop\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli get [SHA]\n"
  printf "  c8l cli get --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SHA"
    printf "    SHA256 of the artifact to get.\n"
    echo

    printf "%s\n" "Examples:"
    printf "  cl g 01430ba1c938528a13cea49cd62862c4820e3edc6fc92a9ac5a7f007ea5478ba\n"
    echo

  fi
}

c8l_cli_workflow_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli workflow-get - [wg] Get workflow from Chainloop.\n"
    echo

  else
    printf "c8l cli workflow-get - [wg] Get workflow from Chainloop.\n"
    echo

  fi

  printf "Alias: wg\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli workflow-get [UUID]\n"
  printf "  c8l cli workflow-get --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "UUID"
    printf "    UUID of the workflow to get.\n"
    echo

    printf "%s\n" "Examples:"
    printf "  cl wg be52251b-0d8a-4719-bc20-16a586555ea4\n"
    echo

  fi
}

c8l_cli_workflow_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli workflow-list - [wl] List workflows from Chainloop.\n"
    echo

  else
    printf "c8l cli workflow-list - [wl] List workflows from Chainloop.\n"
    echo

  fi

  printf "Alias: wl\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli workflow-list\n"
  printf "  c8l cli workflow-list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

c8l_cli_workflow_run_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli workflow-run-get - [wrg] Get workflow run from Chainloop.\n"
    echo

  else
    printf "c8l cli workflow-run-get - [wrg] Get workflow run from Chainloop.\n"
    echo

  fi

  printf "Alias: wrg\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli workflow-run-get [UUID]\n"
  printf "  c8l cli workflow-run-get --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "UUID"
    printf "    UUID of the workflow run to get.\n"
    echo

    printf "%s\n" "Examples:"
    printf "  cl wrg be52251b-0d8a-4719-bc20-16a586555ea4\n"
    echo

  fi
}

c8l_cli_workflow_run_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "c8l cli workflow-run-list - [wrl] List workflow runs from Chainloop.\n"
    echo

  else
    printf "c8l cli workflow-run-list - [wrl] List workflow runs from Chainloop.\n"
    echo

  fi

  printf "Alias: wrl\n"
  echo

  printf "%s\n" "Usage:"
  printf "  c8l cli workflow-run-list\n"
  printf "  c8l cli workflow-run-list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

is_chainloop_in_path() {
  if command -v chainloop &> /dev/null; then
    # we are good
    return 0
  else
    log "chainloop is not in PATH, install it."
    return 1
  fi
}

validate_env() {
    if [ ! is_chainloop_in_path ] ; then
        exit 1
    fi
}

l() {
  yellow "$*"
}

data_path=/tmp/chainloop/data
mkdir -p "$data_path"

store_attestation_uuid() {
    sha256="$1"
    uuid="$2"
    name="$3"
    mkdir -p "${data_path}/$sha256"
    echo "$uuid $name" >> "${data_path}/$sha256/uuids.txt"
}

get_attestations_uuids() {
    sha256="$1"
    if [[ -f "${data_path}/$sha256/uuids.txt" ]]; then
        cat "${data_path}/$sha256/uuids.txt"
    else
        echo "No attestations found for SHA256: $sha256"
    fi
}

# helpers
t=$(date "+%Y%m%d%H%M%S")
script_dir="$(cd "$(dirname "$0")" && pwd)"

log() {
  # echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*"
  yellow "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*"
}

log_error() {
  red_bold "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*"
}

log_header() {
  blue_bold "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*"
}

validate_chainloop_required_env_vars() {
  if [ -z "${CHAINLOOP_ROBOT_ACCOUNT}" ]; then
    log_error "CHAINLOOP_ROBOT_ACCOUNT is not set"
    return 1
  fi
  if [ -z "${CHAINLOOP_VERSION+x}" ]; then
    CHAINLOOP_VERSION=""
  fi
  if [ -z "${CHAINLOOP_SIGNING_KEY}" ]; then
    log_error "CHAINLOOP_SIGNING_KEY is not set"
    return 1
  fi
  if [[ -z "${CHAINLOOP_SIGNING_PASSWORD+x}" ]]; then
    log_error "CHAINLOOP_SIGNING_PASSWORD is not set"
    return 1
  fi
}

install_chainloop_tools() {
  log_header "Installing Chainloop Tools"
  export PATH=/usr/local/bin:$PATH

  if [ -f /usr/local/bin/chainloop ]; then
    log "Skipping... Chainloop Tools already installed"
    return 0
  fi

  curl -sL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
  if [ $? -ne 0 ]; then
    log_error "Cosign installation failed"
    return 1
  fi
  chmod +x /usr/local/bin/cosign

  log "Installing Chainloop CLI"
  if [ -n "${CHAINLOOP_VERSION}" ]; then
    curl -sfL https://docs.chainloop.dev/install.sh | bash -s -- --version v${CHAINLOOP_VERSION}
  else
    curl -sfL https://docs.chainloop.dev/install.sh | bash -s
  fi
  if [ $? -ne 0 ]; then
    log_error "Chainloop installation failed"
    return 1
  fi

  log "Installing Syft, Oras, Cosign, and jq"

  curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
  if [ $? -ne 0 ]; then
    log_error "Syft installation failed"
    return 1
  fi

  python3 -m pip install semgrep

  VERSION="1.0.0"
  curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
  mkdir -p oras-install/
  tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
  sudo mv oras-install/oras /usr/local/bin/
  rm -rf oras_${VERSION}_*.tar.gz oras-install/
  oras version
  if [ $? -ne 0 ]; then
    log_error "Oras installation failed"
    return 1
  fi

  sudo apt-get install jq ruby -y
  if [ $? -ne 0 ]; then
    log_error "jq installation failed"
    return 1
  fi

  sudo gem install rest-client

  sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
  sudo chmod a+x /usr/local/bin/yq
  if [ $? -ne 0 ]; then
    log_error "yq installation failed"
    return 1
  fi

  log "Installing Parlay"
  wget https://github.com/snyk/parlay/releases/download/v0.2.0/parlay_Linux_x86_64.tar.gz
  tar -xvf parlay_Linux_x86_64.tar.gz
  sudo mv parlay /usr/local/bin/
  rm parlay_Linux_x86_64.tar.gz
}

spdx2cyclonedx() {
  spdx_file=$1
  cyclonedx_file=$2
  syft convert "${spdx_file}" -o cyclonedx-json="${cyclonedx_file}"
  if [ $? -ne 0 ]; then
    log_error "SPDX to CycloneDX conversion failed"
    return 1
  fi
}

process_metadata() {
  log "Preparing metadata for $artifact"
  case "$kind" in
  # Each method should set pairs with the list of metadata to add to the attestation
  "vac")
    prepare_metadata_for_vac_artifact
    ;;
  "bitnami")
    prepare_metadata_for_bitnami_artifact
    ;;
  "oci")
    prepare_metadata_for_oci_artifact
    ;;
  "helm_chart")
    prepare_metadata_for_helm_chart_artifact
    ;;
  *)
    log_error "Unknown artifact kind: $kind"
    return 1
    ;;
  esac
  if [ $? -ne 0 ]; then
    log_error "Failed to prepare metadata for $kind artifact"
    return 1
  fi
  log "Preparing metadata for $artifact: DONE"

  if [ $kind != "helm_chart" ] ; then
    if [ ! -f spdx.json ]; then
      syft -o spdx-json $uri > spdx.json
    fi
    if [ ! -f cyclonedx.json ]; then
      syft -o cyclonedx-json $uri > cyclonedx.json
    fi

    parlay scorecard enrich cyclonedx.json | jq > cyclonedx-scorecard.json
    parlay ecosystems enrich cyclonedx-scorecard.json | jq > cyclonedx-scorecard-ecosystems.json
    parlay snyk enrich cyclonedx-scorecard-ecosystems.json | jq > cyclonedx-enriched.json
  fi

  for ((i = 0; i < ${#METADATA[@]}; i += 2)); do
    k=${METADATA[i]}
    v=${METADATA[i + 1]}
    if [[ $v != *.* ]]; then
      v=$(eval "echo \$$v")
    fi

    log "Adding ${k}=${v} to attestation"
    chainloop attestation add --name "${k}" --value "${v}"
    if [ $? -ne 0 ]; then
      log_error "Failed to add ${k} to attestation"
      return 1
    fi
  done
}

# chainloop_adapter_run "${args['kind']}" "${args['registry_uri']}" "${args['artifacts']}"
chainloop_adapter_run() {
  kind=$1
  repo=$2
  artifacts=$3

  CHLP_TMPDIR="tmp/chainloop/adapter/${t}/${kind}/"

  mkdir -p $CHLP_TMPDIR

  # validations
  if [[ ! $artifacts =~ ^[[:alnum:].,:-]+$ ]]; then
    log_error "containers must be a comma-separated list of alphanumeric strings"
    exit 1
  fi

  IFS=',' read -ra vals <<<"$artifacts"
  for a in "${vals[@]}"; do
    cdir=$(pwd)
    tdir="${CHLP_TMPDIR}/$a"
    mkdir -p "${tdir}"
    cd "${tdir}"

    # $repo
    artifact=$a
    uri="${repo}/${artifact}"
    tag="latest"
    app_id="${artifact}"
    if [[ "$artifact" == *:* ]]; then
      tag="${artifact##*:}"
      app_id="${artifact%:*}"
    fi
    full_uri="${repo}/${app_id}:${tag}"
    app_path="${kind}/${app_id}:${tag}"

    # Save the original file descriptors for stdout (1) and stderr (2)
    exec 3>&1 4>&2
    # Redirect both stdout and stderr to a file and screen using tee
    exec > >(tee "output.log") 2>&1

    log_header "Processing ${kind} ${repo} - artifacts $artifacts"
    log_header "  processing artifact: $app_id - $full_uri"
    log "Initializing Chainloop Attestation"
    chainloop attestation init -f # --contract-revision 1
    if [ $? -ne 0 ]; then
      log_error "Chainloop initialization failed"
      exit 1
    fi

    log "Initializing Chainloop Attestation: DONE"
    process_metadata

    if [ $? -ne 0 ]; then
      log_error "Chainloop attestation failed."
      chainloop attestation reset
      # chainloop attestation reset --trigger cancellation
      exit 1
    fi
    chainloop attestation status --full

    # Restore the original file descriptors

    exec 1>&3 2>&4
    # Close the saved file descriptors
    exec 3>&- 4>&-

    chainloop attestation add --name log --value output.log

    # chainloop attestation push --key env://CHAINLOOP_SIGNING_KEY
    chainloop attestation push --key env://CHAINLOOP_SIGNING_KEY --annotation id=$app_id,path=$app_path

    cd "${cdir}"
  done
}

chainloop_attestation_add_from_yaml() {
  script=`cat .chainloop.yml | yq eval '.attestation[] | "chainloop attestation add --name "  + .name + " --value " + .path + "; "'`
  eval $script
}

chainloop_attestation_status() {
  chainloop attestation status --full &> c8-status.txt
  cat c8-status.txt
}

chainloop_attestation_push() {
  chainloop attestation push --key env://CHAINLOOP_SIGNING_KEY &> c8-push.txt
  cat c8-push.txt
}

chainloop_generate_github_summary() {
  digest=`cat c8-push.txt| grep " Digest: " | awk -F\  '{print $3}'`
  echo -e "## Great job!\nYou are making SecOps and Compliance teams really happy. Keep up the good work!\n" >> $GITHUB_STEP_SUMMARY
  echo "**[Chainloop Trust Report](https://app.chainloop.dev/attestation/${digest})**" >> $GITHUB_STEP_SUMMARY

  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  cat c8-status.txt >> $GITHUB_STEP_SUMMARY
  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

c8l_help_command() {
  command="${args[command]}"
  long_usage=yes

  if [[ -z "$command" ]]; then
    # No command argument, show the global help
    help_function=c8_usage
  else
    # Show the help for the requested command
    help_function="c8_${command}_usage"
  fi

  # Call the help function if it exists
  if [[ $(type -t "$help_function") ]]; then
    "$help_function"
  else
    echo "No help available for this command"
    exit 1
  fi

}

c8l_inspect_command() {
  validate_env

  chainloop version
  l "\n\n ORG"
  chainloop org describe  -o json

  l "\n\n CAS Backends"
  chainloop cas-backend list -o json
}

c8l_cli_install_tools_command() {
  validate_env
  install_chainloop_tools
}

c8l_cli_attestation_add_from_yaml_command() {
  validate_env
  chainloop_attestation_add_from_yaml

}

c8l_cli_attestation_status_command() {
  validate_env
  chainloop_attestation_status

}

c8l_cli_attestation_push_command() {
  validate_env
  chainloop_attestation_push

}

c8l_cli_generate_github_summary_command() {
  validate_env
  chainloop_generate_github_summary

}

c8l_cli_get_attestations_command() {
  validate_env

  sha="${args['sha']}"

  # if sha is empty then read from stdin
  if [ -z "$sha" ]; then
    l "Enter sha256 of the artifact to download: "
    read -r sha
  fi

  if [[ "$sha" == *:* ]]; then
    sha="${artifact##*:}"
  fi

  # validate sha256 format
  if [[ ! "$sha" =~ ^[a-f0-9]{64}$ ]]; then
    log_error "Invalid sha256 format: $sha"
    return 1
  fi

  l "All attestations for $sha"
  get_attestations_uuids $sha
  # grpcurl -H "authorization: Bearer $TOKEN" api.cp.chainloop.dev:443  controlplane.v1.WorkflowRunService.List
  # grpcurl -H "authorization: Bearer $TOKEN" api.cp.chainloop.dev:443 list

  # grpcui -H "authorization: Bearer $TOKEN" api.cp.chainloop.dev:443

}

c8l_cli_get_command() {
  validate_env

  sha="${args['sha']}"

  # if sha is empty then read from stdin
  if [ -z "$sha" ]; then
    l "Enter sha256 of the artifact to download: "
    read -r sha
  fi

  if [[ "$sha" == *:* ]]; then
    sha="${artifact##*:}"
  fi

  # validate sha256 format
  if [[ ! "$sha" =~ ^[a-f0-9]{64}$ ]]; then
    log_error "Invalid sha256 format: $sha"
    return 1
  fi

  chainloop artifact download -d sha256:"${sha}"
}

c8l_cli_workflow_get_command() {
  validate_env

  uuid="${args['uuid']}"

  # if sha is empty then read from stdin
  if [ -z "$uuid" ]; then
    l "Enter UUID of the workflow to get: "
    read -r uuid
  fi

  # validate UUID format
  if [[ ! "$uuid" =~ ^[a-f0-9]{8}-([a-f0-9]{4}-){3}[a-f0-9]{12}$ ]]; then
    log_error "Invalid UUID format: $uuid"
    return 1
  fi

  outmode=json

  r=$(chainloop wf list --full -o json | jq --arg id "$uuid" '.[] | select(.id == $id)')
  contractID=$(echo "$r" | jq -r '.contractID')

  echo $r | jq

  l "\n\nContract"
  chainloop wf contract  describe --id "${contractID}" -o table

  l "\n\nWorkflow Robot Accounts"
  chainloop wf ra list --workflow "${uuid}" -o $outmode

  l "\n\nWorkflow Runs"
  chainloop wf workflow-run list --workflow "${uuid}" -o table
}

c8l_cli_workflow_list_command() {
  validate_env
  chainloop workflow list
}

c8l_cli_workflow_run_get_command() {
  validate_env

  uuid="${args['uuid']}"

  # if sha is empty then read from stdin
  if [ -z "$uuid" ]; then
    l "Enter UUID of the workflow run to get: "
    read -r uuid
  fi

  # validate UUID format
  if [[ ! "$uuid" =~ ^[a-f0-9]{8}-([a-f0-9]{4}-){3}[a-f0-9]{12}$ ]]; then
    log_error "Invalid UUID format: $uuid"
    return 1
  fi

  chainloop workflow run describe --id "${uuid}" -o statement
}

c8l_cli_workflow_run_list_command() {
  validate_env

  chainloop workflow run list
}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        c8l_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    help | h)
      action="help"
      shift
      c8l_help_parse_requirements "$@"
      shift $#
      ;;

    inspect | i)
      action="inspect"
      shift
      c8l_inspect_parse_requirements "$@"
      shift $#
      ;;

    cli | c)
      action="cli"
      shift
      c8l_cli_parse_requirements "$@"
      shift $#
      ;;

    "")
      c8l_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_help_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_help_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="help"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_inspect_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_inspect_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="inspect"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    install-tools | it)
      action="install-tools"
      shift
      c8l_cli_install_tools_parse_requirements "$@"
      shift $#
      ;;

    attestation-add-from-yaml | aafy)
      action="attestation-add-from-yaml"
      shift
      c8l_cli_attestation_add_from_yaml_parse_requirements "$@"
      shift $#
      ;;

    attestation-status | as)
      action="attestation-status"
      shift
      c8l_cli_attestation_status_parse_requirements "$@"
      shift $#
      ;;

    attestation-push | ap)
      action="attestation-push"
      shift
      c8l_cli_attestation_push_parse_requirements "$@"
      shift $#
      ;;

    generate-github-summary | ggs)
      action="generate-github-summary"
      shift
      c8l_cli_generate_github_summary_parse_requirements "$@"
      shift $#
      ;;

    get-attestations | ga)
      action="get-attestations"
      shift
      c8l_cli_get_attestations_parse_requirements "$@"
      shift $#
      ;;

    get | g)
      action="get"
      shift
      c8l_cli_get_parse_requirements "$@"
      shift $#
      ;;

    workflow-get | wg)
      action="workflow-get"
      shift
      c8l_cli_workflow_get_parse_requirements "$@"
      shift $#
      ;;

    workflow-list | wl)
      action="workflow-list"
      shift
      c8l_cli_workflow_list_parse_requirements "$@"
      shift $#
      ;;

    workflow-run-get | wrg)
      action="workflow-run-get"
      shift
      c8l_cli_workflow_run_get_parse_requirements "$@"
      shift $#
      ;;

    workflow-run-list | wrl)
      action="workflow-run-list"
      shift
      c8l_cli_workflow_run_list_parse_requirements "$@"
      shift $#
      ;;

    "")
      c8l_cli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_install_tools_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_install_tools_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli install-tools"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_attestation_add_from_yaml_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_attestation_add_from_yaml_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli attestation-add-from-yaml"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_attestation_status_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_attestation_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli attestation-status"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_attestation_push_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_attestation_push_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli attestation-push"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_generate_github_summary_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_generate_github_summary_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli generate-github-summary"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_get_attestations_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_get_attestations_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli get-attestations"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['sha']+x} ]]; then

          args['sha']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

c8l_cli_get_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli get"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['sha']+x} ]]; then

          args['sha']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

c8l_cli_workflow_get_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_workflow_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli workflow-get"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['uuid']+x} ]]; then

          args['uuid']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

c8l_cli_workflow_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_workflow_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli workflow-list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

c8l_cli_workflow_run_get_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_workflow_run_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli workflow-run-get"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['uuid']+x} ]]; then

          args['uuid']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

c8l_cli_workflow_run_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        c8l_cli_workflow_run_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cli workflow-run-list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

initialize() {
  version="0.3.0"
  long_usage=''
  set -e

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "help") c8l_help_command ;;
    "inspect") c8l_inspect_command ;;
    "cli") c8l_cli_command ;;
    "cli install-tools") c8l_cli_install_tools_command ;;
    "cli attestation-add-from-yaml") c8l_cli_attestation_add_from_yaml_command ;;
    "cli attestation-status") c8l_cli_attestation_status_command ;;
    "cli attestation-push") c8l_cli_attestation_push_command ;;
    "cli generate-github-summary") c8l_cli_generate_github_summary_command ;;
    "cli get-attestations") c8l_cli_get_attestations_command ;;
    "cli get") c8l_cli_get_command ;;
    "cli workflow-get") c8l_cli_workflow_get_command ;;
    "cli workflow-list") c8l_cli_workflow_list_command ;;
    "cli workflow-run-get") c8l_cli_workflow_run_get_command ;;
    "cli workflow-run-list") c8l_cli_workflow_run_list_command ;;
  esac
}

initialize
run "$@"
